h1.Tabulatr - Index Tables made easy, finally

h2.Mission Objective

Tabulatr aims at making the ever-recurring task of creating listings of ActiveRecord models simple and uniform.

We found ourselves reinventing the wheel in every project we made, by using

* different paging mechanisms,
* different ways of implementing filtering/searching,
* difterent ways of implementing selecting and batch actions,
* different layouts.

We finally thought that whilst gems like Formtastic or SimpleForm provide a really cool, uniform, and concise way to implement forms, it's time for a table builder. During a project with Magento (*shiver*) we decided that their general tables are quite reasonable, and enterprise-proven -- so that's our starting point. 

h3.Visual Components

Every Tabulatr table consists of the following components:

* a wrapping form
* a 'Controls Container' containing the table-controls as
  * the paginator, 
  * the batch_actions, 
  * the submit button, 
  * controls to manage selecting/checking/marking, 
  * an info_text
* The actual table consisting of
  * A header row,
  * A filter row,
  * data rows,
  * possibly a selecting/checking/marking column
  * possibly action links/buttons
  
Whilst this is a strong decision, we made everything as-configurable-as-possible, there are roughly 150 options you can use to tweak almost every aspect of Tabulatr.

h3.Features

Tabulatr tries to make these common tasks as simple/transparent as possible:
* paging
* selecting/checking/marking
* filtering
* batch actions

h2.Example

h3.Models

We suppose we have a couple of models
* tags has and belong to many products
* vendors have many products
* products belong to vendors and have and belong to many tags
  
h3.Controller

In the products controllers index action we have:

<pre>
  def index
    @products = Product.find_for_table(params)
  end
</pre>

the find_for_table method is injected into ActiveRecord by Tabulatr, it retrieves all relevant data from the params hash automagically.

h3.View

To get a simple Table, all we need to do is

<pre>
  <%= table_for @products do |t|
    t.column :id
    t.column :title
    t.column :price
    t.column :active
    t.association :vendor, :name
    t.association :tags, :title
  end %>
</pre>

but the result is pretty fancy, already:

<form class="hooray" method="get"><div class="table-controls"><input class="submit-table" type="submit" value="Apply" /><div class="paginator"><img class="page-left" src="/images/tabulatr/pager_arrow_left_off.gif" /><input name="product_pagination[current_page]" type="hidden" value="1" /><input name="product_pagination[page]" size="2" type="text" value="1" />/12<input class="page-right" id="product_pagination_page_right" name="product_pagination[page_right]" src="/images/tabulatr/pager_arrow_right.gif" type="image" /><select class="pagesize_select" name="product_pagination[pagesize]"><option selected="selected" value="10">10</option><option value="20">20</option><option value="50">50</option></select></div><div class="check-controls"><input class="select-btn" name="product_checked[select_all]" type="submit" value="Select All" /><input class="select-btn" name="product_checked[select_none]" type="submit" value="Select None" /><input class="select-btn" name="product_checked[select_visible]" type="submit" value="Select visible" /><input class="select-btn" name="product_checked[unselect_visible]" type="submit" value="Unselect visible" /><input class="select-btn" name="product_checked[select_filtered]" type="submit" value="Select filtered" /><input class="select-btn" name="product_checked[unselect_filtered]" type="submit" value="Unselect filtered" /></div><div class="info-text">Showing 10, total 120, selected 0, matching 120</div></div><table class="tabulatr_table"><thead><tr><th>Id<input id="product_sort_id_desc" name="product_sort[_resort][id][desc]" src="/images/tabulatr/sort_arrow_down_off.gif" type="image" /></th><th>Title<input id="product_sort_title_desc" name="product_sort[_resort][title][desc]" src="/images/tabulatr/sort_arrow_down_off.gif" type="image" /></th><th>Price<input id="product_sort_price_desc" name="product_sort[_resort][price][desc]" src="/images/tabulatr/sort_arrow_down_off.gif" type="image" /></th><th>Active<input id="product_sort_active_desc" name="product_sort[_resort][active][desc]" src="/images/tabulatr/sort_arrow_down_off.gif" type="image" /></th><th>Vendor Name</th><th>Tags Title</th></tr><tr><td><input name="product_filter[id]" style="width:97%" type="text" /></td><td><input name="product_filter[title]" style="width:97%" type="text" /></td><td><input name="product_filter[price]" style="width:97%" type="text" /></td><td><input name="product_filter[active]" style="width:97%" type="text" /></td><td><input name="product_filter[__association][vendor.name]" style="width:97%" type="text" /></td><td><input name="product_filter[__association][tags.title]" style="width:97%" type="text" /></td></tr></thead><tbody><tr class="odd"><td>1</td><td>laborum &lt;b&gt; deserunt anim mollit</td><td>3.07</td><td>true</td><td>IBM Inc.</td><td>news, foo</td></tr><tr class="even"><td>2</td><td>lorem deserunt elit anim</td><td>5.95</td><td>true</td><td>Raclette</td><td>bugs, rails, unix</td></tr><tr class="odd"><td>3</td><td>consectetur adipisicing mollit lorem sit</td><td>2.84</td><td>true</td><td>37 Signal</td><td>foo</td></tr><tr class="even"><td>4</td><td>amet anim lorem culpa</td><td>4.5</td><td>true</td><td>Aldi Nord</td><td>foo, rails, unix</td></tr><tr class="odd"><td>5</td><td>culpa ipsum mollit</td><td>8.98</td><td>true</td><td>IBM Inc.</td><td>rails, news</td></tr><tr class="even"><td>6</td><td>anim ipsum lorem amet</td><td>2.71</td><td>true</td><td>Raclette</td><td>bugs, moo</td></tr><tr class="odd"><td>7</td><td>elit elit amet</td><td>9.24</td><td>true</td><td>37 Signal</td><td></td></tr><tr class="even"><td>8</td><td>anim sit lorem ipsum dolor</td><td>6.8</td><td>true</td><td>Aldi Nord</td><td></td></tr><tr class="odd"><td>9</td><td>amet laborum mollit officia officia</td><td>2.4</td><td>true</td><td>IBM Inc.</td><td>foo, bugs, rails</td></tr><tr class="even"><td>10</td><td>laborum deserunt lorem ipsum lorem</td><td>6.4</td><td>false</td><td>Raclette</td><td>rails</td></tr></tbody></table></form>

To add a column with ckeckboxes (thus giving all the "Select ..." buttons a reasonable semantics), we simply add a
<pre>
  t.checkbox  
</pre>
row.

To add e.g. edit-buttons, we specify
<pre>
  t.action do |record|
    link_to "Edit", edit_product_path(record)
  end
</pre>

To add a select-popup with batch-actions (i.e., actions that are to be perfored on all selected rows), we add an option to the table_for:
<pre>
  <%= table_for @products, :batch_actions => {'foo' => 'Foo', 'delete' => "Delete"} do |t|
    ...
  end %>
</pre>

to handle the actual batch action, we have to add a block to the <tt>find_for_table</tt> call in the controller:
<pre>
  @products = Product.find_for_table(params) do |batch_actions|
    batch_actions.delete do |ids|
      ids.each do |id|
        Product.find(id).destroy
      end
      redirect_to index_select_products_path()
      return
    end
    batch_actions.foo do |ids|
      # do whatever is foo-ish to the records
    end
  end
</pre>
where the <tt>ids</tt> parameter to the block is actually an Array containing the numeric ids of the currently selected rows.

h2.Options

Literally every aspect of Tabulatr can be tweaked to fit your needs. You may add or remove components, change the class or other html attributes of the generated html nodes. There are options of several types:

h3.Table Options

These options are to be specified at the form_for level and change the appearance and behaviour of the table. This is taken from <tt>lib/tabulatr/tabulatr/settings.rb</tt>

<pre>
  remote: false,                               # add data-remote="true" to form
  form_class: 'tabulatr_form',                 # class of the overall form
  table_class: 'tabulatr_table',               # class for the actual data table
  sortable_class: 'sortable',                  # class for the header of a sortable column
  sorting_asc_class: 'sorting-asc',            # class for the currently asc sorting column
  sorting_desc_class: 'sorting-desc',          # class for the currently desc sorting column
  page_left_class: 'page-left',                # class for the page left button
  page_right_class: 'page-right',              # class for the page right button
  page_no_class: 'page-no',                    # class for the page no <input>
  control_div_class_before: 'table-controls',  # class of the upper div containing the paging and batch action controls
  control_div_class_after: 'table-controls',   # class of the lower div containing the paging and batch action controls
  paginator_div_class: 'paginator',            # class of the div containing the paging controls
  batch_actions_div_class: 'batch-actions',    # class of the div containing the batch action controls
  select_controls_div_class: 'check-controls',  # class of the div containing the check controls
  submit_class: 'submit-table',                # class of submit button
  pagesize_select_class: 'pagesize_select',    # class of the pagesize select element
  select_all_class: 'select-btn',              # class of the select all button
  select_none_class: 'select-btn',             # class of the select none button
  select_visible_class: 'select-btn',          # class of the select visible button
  unselect_visible_class: 'select-btn',        # class of the unselect visible button
  select_filtered_class: 'select-btn',         # class of the select filtered button
  unselect_filtered_class: 'select-btn',       # class of the unselect filteredbutton
  info_text_class: 'info-text',                # class of the info text div

  batch_actions_label: 'Batch Action: ',       # Text to show in front of the batch action select
  batch_actions_type: :select,                 # :select or :button depending on the kind of input you want
  batch_actions_class: 'batch-action-inputs',  # class to apply on the batch action input elements
  submit_label: 'Apply',                       # Text on the submit button
  select_all_label: 'Select All',              # Text on the select all button
  select_none_label: 'Select None',            # Text on the select none button
  select_visible_label: 'Select visible',      # Text on the select visible button
  unselect_visible_label: 'Unselect visible',  # Text on the unselect visible button
  select_filtered_label: 'Select filtered',    # Text on the select filtered button
  unselect_filtered_label: 'Unselect filtered',# Text on the unselect filtered button
  info_text: "Showing %1$d, total %2$d, selected %3$d, matching %4$d",

  # which controls to be rendered above and below the tabel and in which order
  before_table_controls: [:submit, :paginator, :batch_actions, :select_controls, :info_text],
  after_table_controls: [],

  # whih selecting controls to render in which order
  select_controls: [:select_all, :select_none, :select_visible, :unselect_visible,
                    :select_filtered, :unselect_filtered],

  image_path_prefix: '/images/tabulatr/',
  pager_left_button: 'left.gif',
  pager_left_button_inactive: 'left_off.gif',
  pager_right_button: 'right.gif',
  pager_right_button_inactive: 'right_off.gif',
  sort_up_button: 'up.gif',
  sort_up_button_inactive: 'up_off.gif',
  sort_down_button: 'down.gif',
  sort_down_button_inactive: 'down_off.gif',

  make_form: true,                            # whether or not to wrap the whole table (incl. controls) in a form
  table_html: false,                          # a hash with html attributes for the table
  row_html: false,                            # a hash with html attributes for the normal trs
  header_html: false,                         # a hash with html attributes for the header trs
  filter_html: false,                         # a hash with html attributes for the filter trs
  filter: true,                               # false for no filter row at all
  paginate: true,                             # true to show paginator
  sortable: true,                             # true to allow sorting (can be specified for every sortable column)
  selectable: true,                           # true to render "select all", "select none" and the like
  action: nil,                                # target action of the wrapping form if applicable
  batch_actions: false,                       # name: value hash of batch action stuff
  translate: false,                           # call t() for all 'labels' and stuff, possible values are true/:translate or :localize
  row_classes: ['odd', 'even']                # class for the trs
</pre>

h3. Column Options

<pre>
  header: false,                   # a string to write into the header cell
  width: false,                    # the width of the cell
  align: false,                    # horizontal alignment
  valign: false,                   # vertical alignment
  wrap: true,                      # wraps
  type: :string,                   # :integer, :date
  td_html: false,                  # a hash with html attributes for the cells
  th_html: false,                  # a hash with html attributes for the header cell
  filter_html: false,              # a hash with html attributes for the filter cell
  filter_html: false,              # a hash with html attributes for the filter cell
  filter: true,                    # false for no filter field,
                                   # container for options_for_select
                                   # String from options_from_collection_for_select or the like
                                   # :range for range spec
                                   # :checkbox for a 0/1 valued checkbox
  checkbox_value: '1',             # value if checkbox is checked
  checkbox_label: '',              # text behind the checkbox
  filter_width: '97%',             # width of the filter <input>
  range_filter_symbol: '&ndash;',  # put between the <inputs> of the range filter
  format: false,                   # a sprintf-string or a proc to do special formatting
  method: false,                   # if you want to get the column by a different method than its name
  link: false,                     # proc or symbol to make the content a link
  join_symbol: ', ',               # symbol used to join the elements of 'many' associations
  sortable: true                   # if set, sorting-stuff is added to the header cell
</pre>

h3. Global settings 

These settings are *not* supposed to be changed on a per-table basis. This is necessary, because the <tt>find_for_table</tt> method needs to rely on a priori information.

h4. Table Form Options

This hash contains all the information about the naming of the generated form elements. To override them, you should, in an initializer, call 
<pre>
  Tabulatr.table_form_options(my_options_hash)
</pre>

<pre>
  batch_action_name: 'batch_action',       # name of the batch action param
  sort_by_key: 'sort_by_key',              # name of key which to search, format is 'id asc'
  pagination_postfix: '_pagination',       # name of the param w/ the pagination infos
  filter_postfix: '_filter',               # postfix for name of the filter in the params hash: xxx_filter
  sort_postfix: '_sort',                   # postfix for name of the filter in the params hash: xxx_filter
  checked_postfix: '_checked',             # postfix for name of the checked in the params hash: xxx_filter
  associations_filter: '__association',    # name of the associations in the filter hash
  method: 'post',                          # http method for that form if applicable
  batch_postfix: '_batch',                 # postfix for name of the batch action select
  checked_separator: ','                   # symbol to separate the checked ids
</pre>

h4. Paginate options

To override these, you should, in an initializer, call 
<pre>
  Tabulatr.paginate_options(my_options_hash)
</pre>

<pre>
  page: 1,
  pagesize: 10,
  pagesizes: [10, 20, 50]
</pre>

h2.Dependencies

We use
* <a href="http://github.com/providel/whiny_hash">WhinyHash</a> to handle the options in a fail-early-manner,
* <a href="http://github.com/providel/id_stuffer">IdStuffer</a> to compress the _remembered_ ids.
* And... eh... It's an extension for rails, so it might be handy to have a version of rails 3 and ruby 1.9.

h2.Bugs

There are, definitely, roughly 1000 bugs in Tabulatr, although we do some testing (see <tt>spec/dummy_app/spec</tt>). So if you hunt them, please let me know.

h2. License

Copyright (c) 2010-2011 Peter Horn, <a href="http://www.provideal.net" target="_blank">Provideal GmbH</a>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
